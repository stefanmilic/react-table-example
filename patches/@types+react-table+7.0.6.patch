diff --git a/node_modules/@types/react-table/index.d.ts b/node_modules/@types/react-table/index.d.ts
index a913880..fd0a5e0 100644
--- a/node_modules/@types/react-table/index.d.ts
+++ b/node_modules/@types/react-table/index.d.ts
@@ -112,7 +112,7 @@ export type UseTableOptions<D extends object> = {
     defaultColumn: Partial<Column<D>>;
     initialRowStateKey: IdType<D>;
     getSubRows: (originalRow: D, relativeIndex: number) => D[];
-    getRowId: (originalRow: D, relativeIndex: number, parent?: Row<D>) => string;
+    getRowId: (originalRow: D, relativeIndex: number) => IdType<D>;
 }>;
 
 export type PropGetter<D extends object, Props, T extends object = never, P = Partial<Props>> =
@@ -150,13 +150,14 @@ export interface UseTableHooks<D extends object> extends Record<string, any> {
     >;
     columns: Array<(columns: Array<Column<D>>, meta: Meta<D>) => Array<Column<D>>>;
     columnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;
-    flatColumns: Array<(flatColumns: Array<Column<D>>, meta: Meta<D>) => Array<Column<D>>>;
-    flatColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;
-    headerGroups: Array<(flatColumns: Array<HeaderGroup<D>>, meta: Meta<D>) => Array<HeaderGroup<D>>>;
-    headerGroupDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;
+    allColumns: Array<(allColumns: Array<Column<D>>, meta: Meta<D>) => Array<Column<D>>>;
+    allColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;
+    visibleColumns: Array<(allColumns: Array<Column<D>>, meta: Meta<D>) => Array<Column<D>>>;
+    visibleColumnsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;
+    headerGroups: Array<(allColumns: Array<HeaderGroup<D>>, meta: Meta<D>) => Array<HeaderGroup<D>>>;
+    headerGroupsDeps: Array<(deps: any[], meta: Meta<D>) => any[]>;
     useInstanceBeforeDimensions: Array<(instance: TableInstance<D>) => void>;
     useInstance: Array<(instance: TableInstance<D>) => void>;
-    useRows: Array<(rows: Array<Row<D>>, meta: Meta<D>) => Array<Row<D>>>;
     prepareRow: Array<(row: Row<D>, meta: Meta<D>) => void>;
     useControlledState: Array<(state: TableState<D>, meta: Meta<D>) => TableState<D>>;
 
@@ -193,21 +194,25 @@ export interface UseTableInstanceProps<D extends object> {
     plugins: Array<PluginHook<D>>;
     dispatch: TableDispatch;
     columns: Array<ColumnInstance<D>>;
-    flatColumns: Array<ColumnInstance<D>>;
+    allColumns: Array<ColumnInstance<D>>;
+    visibleColumns: Array<ColumnInstance<D>>;
     headerGroups: Array<HeaderGroup<D>>;
     footerGroups: Array<HeaderGroup<D>>;
     headers: Array<ColumnInstance<D>>;
     flatHeaders: Array<ColumnInstance<D>>;
     rows: Array<Row<D>>;
+    rowsById: Record<string, Row<D>>;
     getTableProps: (propGetter?: TablePropGetter<D>) => TableProps;
     getTableBodyProps: (propGetter?: TableBodyPropGetter<D>) => TableBodyProps;
     prepareRow: (row: Row<D>) => void;
     flatRows: Array<Row<D>>;
     totalColumnsWidth: number;
+    allColumnsHidden: boolean;
     toggleHideColumn: (columnId: IdType<D>, value?: boolean) => void;
     setHiddenColumns: (param: Array<IdType<D>> | UpdateHiddenColumns<D>) => void;
     toggleHideAllColumns: (value?: boolean) => void;
     getToggleHideAllColumnsProps: (props?: Partial<TableToggleHideAllColumnProps>) => TableToggleHideAllColumnProps;
+    getHooks: () => Array<PluginHook<D>>;
 }
 
 export interface UseTableHeaderGroupProps<D extends object> {
@@ -333,7 +338,7 @@ export type UseExpandedOptions<D extends object> = Partial<{
 }>;
 
 export interface UseExpandedHooks<D extends object> {
-    getExpandedToggleProps: Array<(row: Row<D>, instance: TableInstance<D>) => object>;
+    getToggleAllRowsExpandedProps: Array<(row: Row<D>, instance: TableInstance<D>) => object>;
 }
 
 export interface UseExpandedState<D extends object> {
@@ -341,17 +346,21 @@ export interface UseExpandedState<D extends object> {
 }
 
 export interface UseExpandedInstanceProps<D extends object> {
+    preExpandedRows: Array<Row<D>>;
+    expandedRows: Array<Row<D>>;
     rows: Array<Row<D>>;
-    toggleExpanded: (id: Array<IdType<D>>, isExpanded: boolean) => void;
     expandedDepth: number;
+    isAllRowsExpanded: boolean;
+    toggleRowExpanded: (id: Array<IdType<D>>, value: boolean) => void;
+    toggleAllRowsExpanded: (value: boolean) => void;
 }
 
 export interface UseExpandedRowProps<D extends object> {
     isExpanded: boolean;
     canExpand: boolean;
     subRows: Array<Row<D>>;
-    toggleExpanded: (isExpanded?: boolean) => void;
-    getExpandedToggleProps: (props?: Partial<TableExpandedToggleProps>) => TableExpandedToggleProps;
+    toggleRowExpanded: (value?: boolean) => void;
+    getToggleRowExpandedProps: (props?: Partial<TableExpandedToggleProps>) => TableExpandedToggleProps;
 }
 
 //#endregion
@@ -383,8 +392,15 @@ export type UseFiltersColumnOptions<D extends object> = Partial<{
 }>;
 
 export interface UseFiltersInstanceProps<D extends object> {
-    rows: Array<Row<D>>;
     preFilteredRows: Array<Row<D>>;
+    preFilteredFlatRows: Array<Row<D>>;
+    preFilteredRowsById: Record<string, Row<D>>;
+    filteredRows: Array<Row<D>>;
+    filteredFlatRows: Array<Row<D>>;
+    filteredRowsById: Record<string, Row<D>>;
+    rows: Array<Row<D>>;
+    flatRows: Array<Row<D>>;
+    rowsById: Record<string, Row<D>>;
     setFilter: (columnId: IdType<D>, updater: ((filterValue: FilterValue) => FilterValue) | FilterValue) => void;
     setAllFilters: (updater: Filters<D> | ((filters: Filters<D>) => Filters<D>)) => void;
 }
@@ -447,8 +463,15 @@ export interface UseGlobalFiltersState<D extends object> {
 }
 
 export interface UseGlobalFiltersInstanceProps<D extends object> {
-    rows: Array<Row<D>>;
     preGlobalFilteredRows: Array<Row<D>>;
+    preGlobalFilteredFlatRows: Array<Row<D>>;
+    preGlobalFilteredRowsById: Record<string, Row<D>>;
+    globalFilteredRows: Array<Row<D>>;
+    globalFilteredFlatRows: Array<Row<D>>;
+    globalFilteredRowsById: Record<string, Row<D>>;
+    rows: Array<Row<D>>;
+    flatRows: Array<Row<D>>;
+    rowsById: Record<string, Row<D>>;
     setGlobalFilter: (filterValue: FilterValue) => void;
 }
 
@@ -481,7 +504,7 @@ export interface UseGroupByState<D extends object> {
 }
 
 export type UseGroupByColumnOptions<D extends object> = Partial<{
-    aggregate: Aggregator<D> | Array<Aggregator<D>>;
+    aggregate: Aggregator<D>;
     Aggregated: Renderer<CellProps<D>>;
     disableGroupBy: boolean;
     defaultCanGroupBy: boolean;
@@ -489,9 +512,20 @@ export type UseGroupByColumnOptions<D extends object> = Partial<{
 }>;
 
 export interface UseGroupByInstanceProps<D extends object> {
-    rows: Array<Row<D>>;
     preGroupedRows: Array<Row<D>>;
-    toggleGroupBy: (columnId: IdType<D>, toggle: boolean) => void;
+    preGroupedFlatRows: Array<Row<D>>;
+    preGroupedRowsById: Record<string, Row<D>>;
+    groupedRows: Array<Row<D>>;
+    groupedFlatRows: Array<Row<D>>;
+    groupedRowsById: Record<string, Row<D>>;
+    onlyGroupedFlatRows: Array<Row<D>>;
+    onlyGroupedRowsById: Record<string, Row<D>>;
+    nonGroupedFlatRows: Array<Row<D>>;
+    nonGroupedRowsById: Record<string, Row<D>>;
+    rows: Array<Row<D>>;
+    flatRows: Array<Row<D>>;
+    rowsById: Record<string, Row<D>>;
+    toggleGroupBy: (columnId: IdType<D>, value: boolean) => void;
 }
 
 export interface UseGroupByColumnProps<D extends object> {
@@ -515,7 +549,7 @@ export interface UseGroupByRowProps<D extends object> {
 
 export interface UseGroupByCellProps<D extends object> {
     isGrouped: boolean;
-    isRepeatedValue: boolean;
+    isPlaceholder: boolean;
     isAggregated: boolean;
 }
 
@@ -625,7 +659,7 @@ export interface UseRowSelectState<D extends object> {
 
 export interface UseRowSelectInstanceProps<D extends object> {
     toggleRowSelected: (rowId: IdType<D>, set?: boolean) => void;
-    toggleAllRowsSelected: (set?: boolean) => void;
+    toggleAllRowsSelected: (value?: boolean) => void;
     getToggleAllRowsSelectedProps: (
         props?: Partial<TableToggleAllRowsSelectedProps>,
     ) => TableToggleAllRowsSelectedProps;
@@ -801,6 +835,4 @@ export function useMountedLayoutEffect(effect: EffectCallback, deps?: Dependency
 
 export function useAsyncDebounce<F extends (...args: any[]) => any>(defaultFn: F, defaultWait?: number): F;
 
-export function useConsumeHookGetter<D extends object>(hooks: Hooks<D>, hookName: string): any;
-
 export function makeRenderer(instance: TableInstance, column: ColumnInstance, meta?: any): ReactElement;
